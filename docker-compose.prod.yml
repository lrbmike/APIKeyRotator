version: '3.8'

services:

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=3306
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GLOBAL_PROXY_KEYS=${GLOBAL_PROXY_KEYS}
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - PROXY_PUBLIC_BASE_URL=${PROXY_PUBLIC_BASE_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - api-key-rotator-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - api-key-rotator-network

  db:
    image: mysql:8.0.43
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      timeout: 20s
      retries: 10
    restart: unless-stopped
    networks:
      - api-key-rotator-network

  redis:
    image: redis:7.0.15-alpine
    command: >
      sh -c "
        if [ -n '${REDIS_PASSWORD}' ]; then
          redis-server --requirepass ${REDIS_PASSWORD}
        else
          redis-server
        fi
      "
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - api-key-rotator-network

volumes:
  mysql_data:
  redis_data:

networks:
  api-key-rotator-network:
    driver: bridge